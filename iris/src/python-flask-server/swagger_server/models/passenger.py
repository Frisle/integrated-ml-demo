# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Passenger(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, passenger_id: int=None, survived: int=None, _class: int=None, name: str=None, sex: str=None, age: float=None, sib_sp: int=None, par_ch: int=None, ticket: str=None, fare: float=None, cabin: str=None, embarked: str=None):  # noqa: E501
        """Passenger - a model defined in Swagger

        :param passenger_id: The passenger_id of this Passenger.  # noqa: E501
        :type passenger_id: int
        :param survived: The survived of this Passenger.  # noqa: E501
        :type survived: int
        :param _class: The _class of this Passenger.  # noqa: E501
        :type _class: int
        :param name: The name of this Passenger.  # noqa: E501
        :type name: str
        :param sex: The sex of this Passenger.  # noqa: E501
        :type sex: str
        :param age: The age of this Passenger.  # noqa: E501
        :type age: float
        :param sib_sp: The sib_sp of this Passenger.  # noqa: E501
        :type sib_sp: int
        :param par_ch: The par_ch of this Passenger.  # noqa: E501
        :type par_ch: int
        :param ticket: The ticket of this Passenger.  # noqa: E501
        :type ticket: str
        :param fare: The fare of this Passenger.  # noqa: E501
        :type fare: float
        :param cabin: The cabin of this Passenger.  # noqa: E501
        :type cabin: str
        :param embarked: The embarked of this Passenger.  # noqa: E501
        :type embarked: str
        """
        self.swagger_types = {
            'passenger_id': int,
            'survived': int,
            '_class': int,
            'name': str,
            'sex': str,
            'age': float,
            'sib_sp': int,
            'par_ch': int,
            'ticket': str,
            'fare': float,
            'cabin': str,
            'embarked': str
        }

        self.attribute_map = {
            'passenger_id': 'passengerId',
            'survived': 'survived',
            '_class': 'class',
            'name': 'name',
            'sex': 'sex',
            'age': 'age',
            'sib_sp': 'sibSp',
            'par_ch': 'parCh',
            'ticket': 'ticket',
            'fare': 'fare',
            'cabin': 'cabin',
            'embarked': 'embarked'
        }

        self._passenger_id = passenger_id
        self._survived = survived
        self.__class = _class
        self._name = name
        self._sex = sex
        self._age = age
        self._sib_sp = sib_sp
        self._par_ch = par_ch
        self._ticket = ticket
        self._fare = fare
        self._cabin = cabin
        self._embarked = embarked

    @classmethod
    def from_dict(cls, dikt) -> 'Passenger':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The passenger of this Passenger.  # noqa: E501
        :rtype: Passenger
        """
        return util.deserialize_model(dikt, cls)

    @property
    def passenger_id(self) -> int:
        """Gets the passenger_id of this Passenger.


        :return: The passenger_id of this Passenger.
        :rtype: int
        """
        return self._passenger_id

    @passenger_id.setter
    def passenger_id(self, passenger_id: int):
        """Sets the passenger_id of this Passenger.


        :param passenger_id: The passenger_id of this Passenger.
        :type passenger_id: int
        """

        self._passenger_id = passenger_id

    @property
    def survived(self) -> int:
        """Gets the survived of this Passenger.


        :return: The survived of this Passenger.
        :rtype: int
        """
        return self._survived

    @survived.setter
    def survived(self, survived: int):
        """Sets the survived of this Passenger.


        :param survived: The survived of this Passenger.
        :type survived: int
        """

        self._survived = survived

    @property
    def _class(self) -> int:
        """Gets the _class of this Passenger.


        :return: The _class of this Passenger.
        :rtype: int
        """
        return self.__class

    @_class.setter
    def _class(self, _class: int):
        """Sets the _class of this Passenger.


        :param _class: The _class of this Passenger.
        :type _class: int
        """

        self.__class = _class

    @property
    def name(self) -> str:
        """Gets the name of this Passenger.


        :return: The name of this Passenger.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Passenger.


        :param name: The name of this Passenger.
        :type name: str
        """

        self._name = name

    @property
    def sex(self) -> str:
        """Gets the sex of this Passenger.


        :return: The sex of this Passenger.
        :rtype: str
        """
        return self._sex

    @sex.setter
    def sex(self, sex: str):
        """Sets the sex of this Passenger.


        :param sex: The sex of this Passenger.
        :type sex: str
        """

        self._sex = sex

    @property
    def age(self) -> float:
        """Gets the age of this Passenger.


        :return: The age of this Passenger.
        :rtype: float
        """
        return self._age

    @age.setter
    def age(self, age: float):
        """Sets the age of this Passenger.


        :param age: The age of this Passenger.
        :type age: float
        """

        self._age = age

    @property
    def sib_sp(self) -> int:
        """Gets the sib_sp of this Passenger.


        :return: The sib_sp of this Passenger.
        :rtype: int
        """
        return self._sib_sp

    @sib_sp.setter
    def sib_sp(self, sib_sp: int):
        """Sets the sib_sp of this Passenger.


        :param sib_sp: The sib_sp of this Passenger.
        :type sib_sp: int
        """

        self._sib_sp = sib_sp

    @property
    def par_ch(self) -> int:
        """Gets the par_ch of this Passenger.


        :return: The par_ch of this Passenger.
        :rtype: int
        """
        return self._par_ch

    @par_ch.setter
    def par_ch(self, par_ch: int):
        """Sets the par_ch of this Passenger.


        :param par_ch: The par_ch of this Passenger.
        :type par_ch: int
        """

        self._par_ch = par_ch

    @property
    def ticket(self) -> str:
        """Gets the ticket of this Passenger.


        :return: The ticket of this Passenger.
        :rtype: str
        """
        return self._ticket

    @ticket.setter
    def ticket(self, ticket: str):
        """Sets the ticket of this Passenger.


        :param ticket: The ticket of this Passenger.
        :type ticket: str
        """

        self._ticket = ticket

    @property
    def fare(self) -> float:
        """Gets the fare of this Passenger.


        :return: The fare of this Passenger.
        :rtype: float
        """
        return self._fare

    @fare.setter
    def fare(self, fare: float):
        """Sets the fare of this Passenger.


        :param fare: The fare of this Passenger.
        :type fare: float
        """

        self._fare = fare

    @property
    def cabin(self) -> str:
        """Gets the cabin of this Passenger.


        :return: The cabin of this Passenger.
        :rtype: str
        """
        return self._cabin

    @cabin.setter
    def cabin(self, cabin: str):
        """Sets the cabin of this Passenger.


        :param cabin: The cabin of this Passenger.
        :type cabin: str
        """

        self._cabin = cabin

    @property
    def embarked(self) -> str:
        """Gets the embarked of this Passenger.


        :return: The embarked of this Passenger.
        :rtype: str
        """
        return self._embarked

    @embarked.setter
    def embarked(self, embarked: str):
        """Sets the embarked of this Passenger.


        :param embarked: The embarked of this Passenger.
        :type embarked: str
        """

        self._embarked = embarked
